#include <iostream>
#include <fstream>
#include <string>

#include "../include/http/constant.h"
#include "../include/http/utils/httpparser.h"
#include "../include/http/request.h"
#include "../include/http/response.h"
#include "../include/http/httpclient.h"
#include "../include/http/httpserver.h"
#include "../include/http/server.h"
#include "../include/http/mod/file.h"
#include "../include/http/mod/match.h"

#define NONIUS_USE_BOOST_CHRONO
#define NONIUS_RUNNER
#include <nonius/main.h++>
#include <nonius/nonius.h++>

NONIUS_BENCHMARK("BM_HTTP_Parser", [] {
      /*
      POST /ctl/ContentDir HTTP/1.0
      Content-Type: text/xml; charset="utf-8"
      HOST: 192.168.0.13
      Content-Length: 530
      SOAPACTION: "urn:schemas-upnp-org:service:ContentDirectory:1#Browse"
      Connection: close
      User-Agent: SEC_HHP_iMediaShare/1.0

      <?xml version="1.0" encoding="utf-8"?>
      <s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
         <s:Body>
            <u:Browse xmlns:u="urn:schemas-upnp-org:service:ContentDirectory:1">
               <ObjectID>0</ObjectID>
               <BrowseFlag>BrowseMetadata</BrowseFlag>
               <Filter>*</Filter>
               <StartingIndex>0</StartingIndex>
               <RequestedCount>0</RequestedCount>
               <SortCriteria></SortCriteria>
            </u:Browse>
         </s:Body>
      </s:Envelope>
       */
      char peer0_0[] = {
          0x50, 0x4f, 0x53, 0x54, 0x20, 0x2f, 0x63, 0x74,
          0x6c, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
          0x74, 0x44, 0x69, 0x72, 0x20, 0x48, 0x54, 0x54,
          0x50, 0x2f, 0x31, 0x2e, 0x30, 0x0d, 0x0a, 0x43,
          0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54,
          0x79, 0x70, 0x65, 0x3a, 0x20, 0x74, 0x65, 0x78,
          0x74, 0x2f, 0x78, 0x6d, 0x6c, 0x3b, 0x20, 0x63,
          0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x22,
          0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x0d, 0x0a,
          0x48, 0x4f, 0x53, 0x54, 0x3a, 0x20, 0x31, 0x39,
          0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x30, 0x2e,
          0x31, 0x33, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
          0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67,
          0x74, 0x68, 0x3a, 0x20, 0x35, 0x33, 0x30, 0x0d,
          0x0a, 0x53, 0x4f, 0x41, 0x50, 0x41, 0x43, 0x54,
          0x49, 0x4f, 0x4e, 0x3a, 0x20, 0x22, 0x75, 0x72,
          0x6e, 0x3a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
          0x73, 0x2d, 0x75, 0x70, 0x6e, 0x70, 0x2d, 0x6f,
          0x72, 0x67, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69,
          0x63, 0x65, 0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x65,
          0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
          0x6f, 0x72, 0x79, 0x3a, 0x31, 0x23, 0x42, 0x72,
          0x6f, 0x77, 0x73, 0x65, 0x22, 0x0d, 0x0a, 0x43,
          0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
          0x6e, 0x3a, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65,
          0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41,
          0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x53, 0x45,
          0x43, 0x5f, 0x48, 0x48, 0x50, 0x5f, 0x69, 0x4d,
          0x65, 0x64, 0x69, 0x61, 0x53, 0x68, 0x61, 0x72,
          0x65, 0x2f, 0x31, 0x2e, 0x30, 0x0d, 0x0a
      };
      char peer0_1[] = {
          0x0d, 0x0a, 0x3c, 0x3f, 0x78, 0x6d, 0x6c, 0x20,
          0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d,
          0x22, 0x31, 0x2e, 0x30, 0x22, 0x20, 0x65, 0x6e,
          0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x22,
          0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x3f, 0x3e,
          0x0a, 0x3c, 0x73, 0x3a, 0x45, 0x6e, 0x76, 0x65,
          0x6c, 0x6f, 0x70, 0x65, 0x20, 0x78, 0x6d, 0x6c,
          0x6e, 0x73, 0x3a, 0x73, 0x3d, 0x22, 0x68, 0x74,
          0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x73, 0x63, 0x68,
          0x65, 0x6d, 0x61, 0x73, 0x2e, 0x78, 0x6d, 0x6c,
          0x73, 0x6f, 0x61, 0x70, 0x2e, 0x6f, 0x72, 0x67,
          0x2f, 0x73, 0x6f, 0x61, 0x70, 0x2f, 0x65, 0x6e,
          0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2f, 0x22,
          0x20, 0x73, 0x3a, 0x65, 0x6e, 0x63, 0x6f, 0x64,
          0x69, 0x6e, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65,
          0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
          0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
          0x2e, 0x78, 0x6d, 0x6c, 0x73, 0x6f, 0x61, 0x70,
          0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x73, 0x6f, 0x61,
          0x70, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
          0x6e, 0x67, 0x2f, 0x22, 0x3e, 0x0a, 0x20, 0x20,
          0x20, 0x3c, 0x73, 0x3a, 0x42, 0x6f, 0x64, 0x79,
          0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x3c, 0x75, 0x3a, 0x42, 0x72, 0x6f, 0x77, 0x73,
          0x65, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a,
          0x75, 0x3d, 0x22, 0x75, 0x72, 0x6e, 0x3a, 0x73,
          0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2d, 0x75,
          0x70, 0x6e, 0x70, 0x2d, 0x6f, 0x72, 0x67, 0x3a,
          0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a,
          0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44,
          0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
          0x3a, 0x31, 0x22, 0x3e, 0x0a, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x4f,
          0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x3e,
          0x30, 0x3c, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63,
          0x74, 0x49, 0x44, 0x3e, 0x0a, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x42,
          0x72, 0x6f, 0x77, 0x73, 0x65, 0x46, 0x6c, 0x61,
          0x67, 0x3e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
          0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
          0x3c, 0x2f, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
          0x46, 0x6c, 0x61, 0x67, 0x3e, 0x0a, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c,
          0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3e, 0x2a,
          0x3c, 0x2f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
          0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x3c, 0x53, 0x74, 0x61, 0x72,
          0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65,
          0x78, 0x3e, 0x30, 0x3c, 0x2f, 0x53, 0x74, 0x61,
          0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64,
          0x65, 0x78, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x52, 0x65,
          0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43,
          0x6f, 0x75, 0x6e, 0x74, 0x3e, 0x30, 0x3c, 0x2f,
          0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
          0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3e, 0x0a,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x3c, 0x53, 0x6f, 0x72, 0x74, 0x43, 0x72,
          0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x3e, 0x3c,
          0x2f, 0x53, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x69,
          0x74, 0x65, 0x72, 0x69, 0x61, 0x3e, 0x0a, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x2f, 0x75,
          0x3a, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x3e,
          0x0a, 0x20, 0x20, 0x20, 0x3c, 0x2f, 0x73, 0x3a,
          0x42, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f,
          0x73, 0x3a, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
          0x70, 0x65, 0x3e, 0x0a
      };

      std::array<char, http::BUFFER_SIZE> request;

      for ( size_t i = 0; i < sizeof ( peer0_0 ); i++ ) {
          request[i] = peer0_0[i];
      }

      std::array<char, http::BUFFER_SIZE> request2;

      for ( size_t i = 0; i < sizeof ( peer0_1 ); i++ ) {
          request2[i] = peer0_1[i];
      }

      http::Request http_request;
      http::utils::HttpParser http_parser;
      size_t state = http_parser.parse_request ( http_request, request, 0, sizeof ( peer0_0 ) );
      assert ( 0U == state );
      state = http_parser.parse_request ( http_request, request2, 0, sizeof ( peer0_1 ) );
      assert ( 2U == state );
})

NONIUS_BENCHMARK("BM_GET_File", [] {
    //create the server
    http::Server< http::HttpServer > server ( "127.0.0.1", "9999" );
    server.bind( http::mod::Match<>( "*" ), http::mod::File( TESTFILES ), http::mod::Http() );

    http::HttpClient client_ ( "localhost", "9999" );
    http::Request request_ ( "/files/The%20Divine%20Comedy.txt" );
    std::stringstream _sstream;
    client_.get ( request_, _sstream );
    std::ifstream f1 ( std::string ( TESTFILES ) + "files/The Divine Comedy.txt", std::ifstream::binary );
    if( request_.method() != http::method::GET ) {
        std::cerr << "wrong method in request: " << request_.method() << std::endl;
    }
})
